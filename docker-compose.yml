version: '2.4'
services:

  ## dependencies

  zookeeper:
    image: registry1-docker-io.repo.lab.pl.alcatel-lucent.com/bitnami/zookeeper:latest
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    healthcheck:
      test: /opt/bitnami/zookeeper/bin/zkServer.sh status

  kafka:
    image: registry1-docker-io.repo.lab.pl.alcatel-lucent.com/confluentinc/cp-enterprise-kafka:5.0.0
    restart: on-failure
    depends_on:
      - zookeeper
    ports:
      # Exposes 29092 for external connections to the broker
      # Use kafka1:9092 for connections internal on the docker network
      # See https://rmoff.net/2018/08/02/kafka-listeners-explained/ for details
      - "29092:29092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_BROKER_ID: 1
      KAFKA_BROKER_RACK: "r1"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG4J_ROOT_LOGLEVEL: ERROR
    healthcheck:
      test: ps augwwx | egrep [S]upportedKafka

  run-kafka:
    image: registry1-docker-io.repo.lab.pl.alcatel-lucent.com/zablvit/zero
    depends_on:
      kafka:
        condition: service_healthy

#  db:
#    image: postgres:12-alpine
#    container_name: db
#    restart: always
#    ports:
#      - '5432:5432'
#    environment:
#      - POSTGRES_PASSWORD=s3cr3t
#      - POSTGRES_USER=postgres
#      - POSTGRES_DB=microservices
#    volumes:
#      - db:/var/lib/postgresql/data
#    healthcheck:
#      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
#      #test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
#      interval: 1s
#      timeout: 5s
#      retries: 10
#
#  run-kafka:
#    image: registry1-docker-io.repo.lab.pl.alcatel-lucent.com/zablvit/zero
#    depends_on:
#      db:
#        condition: service_healthy
#      kafka:
#        condition: service_healthy
#
#volumes:
#  db: